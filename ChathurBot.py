#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Nov 15, 2017 02:33:21 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import ChathurBot_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = ChathurBot (root)
    ChathurBot_support.init(root, top)
    root.mainloop()

w = None
def create_ChathurBot(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = ChathurBot (w)
    ChathurBot_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ChathurBot():
    global w
    w.destroy()
    w = None


class ChathurBot:
    def Ask(self):
        question = self.Scrolledentry1.get()
        objIntent = self.Intent
        objEntity = self.Entity
        objResponse = self.Response
        objIntent.insert(END, question)

        # global rrr
        # rrr = StringVar
        # rrr.set(("nhb","jgjgsh"))
        # for i in range(len(entities)):
        #     objEntity.insert(END, rrr[i])
        objResponse.insert(END, question)
        objEntity.insert(END, question)
        sys.stdout.flush()

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans Mono} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 0 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("601x552+450+95")
        top.title("ChathurBot")
        top.configure(background="#d8c99c")
        top.configure(highlightcolor="black")



        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.02, rely=0.02, relheight=0.29, relwidth=0.97)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#d6dcd8")
        self.Frame1.configure(width=585)

        self.Label4 = Label(self.Frame1)
        self.Label4.place(relx=0.02, rely=0.13, height=18, width=125)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(text='''Ask a Question Here''')

        self.fra41_but50 = Button(self.Frame1)
        self.fra41_but50.place(relx=0.81, rely=0.75, height=26, width=47)
        self.fra41_but50.configure(activebackground="#56311e")
        self.fra41_but50.configure(activeforeground="white")
        self.fra41_but50.configure(background="#d4d4b9")
        self.fra41_but50.configure(command=self.Ask)
        self.fra41_but50.configure(text='''Ask''')

        self.Scrolledentry1 = ScrolledEntry(self.Frame1)
        self.Scrolledentry1.place(relx=0.12, rely=0.38,relwidth=0.77)
        self.Scrolledentry1.configure(background="white")
        self.Scrolledentry1.configure(font=font9)
        self.Scrolledentry1.configure(insertborderwidth="1")
        self.Scrolledentry1.configure(selectbackground="#c4c4c4")
        self.Scrolledentry1.configure(width=15)

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.02, rely=0.33, relheight=0.64, relwidth=0.97)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(background="#d6dcd9")
        self.Frame2.configure(width=580)

        self.fra42_lab43 = Label(self.Frame2)
        self.fra42_lab43.place(relx=0.02, rely=0.06, height=18, width=141)
        self.fra42_lab43.configure(activebackground="#f9f9f9")
        self.fra42_lab43.configure(text='''Intent Of The Question''')

        self.Label2 = Label(self.Frame2)
        self.Label2.place(relx=0.02, rely=0.2, height=18, width=147)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Entities of The Question''')

        self.Label3 = Label(self.Frame2)
        self.Label3.place(relx=0.02, rely=0.54, height=18, width=61)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Response''')

        self.Intent = Listbox(self.Frame2)
        self.Intent.place(relx=0.38, rely=0.06, relheight=0.07, relwidth=0.52)
        self.Intent.configure(font=font10)
        self.Intent.configure(selectbackground="#c4c4c4")
        self.Intent.configure(width=304)

        self.Entity = ScrolledListBox(self.Frame2)
        self.Entity.place(relx=0.38, rely=0.2, relheight=0.26, relwidth=0.53)
        self.Entity.configure(background="white")
        self.Entity.configure(font=font10)
        self.Entity.configure(highlightcolor="#d9d9d9")
        self.Entity.configure(selectbackground="#c4c4c4")
        self.Entity.configure(width=10)

        self.Response = ScrolledListBox(self.Frame2)
        self.Response.place(relx=0.38, rely=0.54, relheight=0.41, relwidth=0.53)
        self.Response.configure(background="white")
        self.Response.configure(font=font10)
        self.Response.configure(highlightcolor="#d9d9d9")
        self.Response.configure(selectbackground="#c4c4c4")
        self.Response.configure(width=10)





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledEntry(AutoScroll, Entry):
    '''A standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



