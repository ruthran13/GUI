#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Nov 20, 2017 05:44:25 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import ChathurBot_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    ChathurBot_support.set_Tk_var()
    top = ChathurBot (root)
    ChathurBot_support.init(root, top)
    root.mainloop()

w = None
def create_ChathurBot(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    ChathurBot_support.set_Tk_var()
    top = ChathurBot (w)
    ChathurBot_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ChathurBot():
    global w
    w.destroy()
    w = None


class ChathurBot:
    def Ask(self):
        question = self.Scrolledentry1.get()
        # data = ChathurBot_support.getVa()
        # sys.stdout.flush()
        combination = {"intent": "", "entity": "", "sql": ""}
        if (ChathurBot_support.che54.get() == '1'):
            # print "haha"
            # ChathurBot_support.che46.state(['disabled'])
            combination["intent"] = "wit"
        elif (ChathurBot_support.che46.get() == '1'):
            combination["intent"] = "neural"
        elif (ChathurBot_support.che47.get() == '1'):
            combination["intent"] = "machine"

        if (ChathurBot_support.che49.get() == '1'):
            # print "haha"
            # ChathurBot_support.che46.state(['disabled'])
            combination["entity"] = "wit"
        elif (ChathurBot_support.che48.get() == '1'):
            combination["entity"] = "core"

        if (ChathurBot_support.che51.get() == '1'):
            # print "haha"
            # ChathurBot_support.che46.state(['disabled'])
            combination["sql"] = "rule"
        elif (ChathurBot_support.che52.get() == '1'):
            combination["sql"] = "prediction"
        elif (ChathurBot_support.che53.get() == '1'):
            combination["sql"] = "seq"

        # print combination["intent"]
        # print combination["entity"]
        # print combination["sql"]

        ChathurBot_support.che46.set('')
        ChathurBot_support.che47.set('')
        ChathurBot_support.che48.set('')
        ChathurBot_support.che49.set('')
        ChathurBot_support.che51.set('')
        ChathurBot_support.che52.set('')
        ChathurBot_support.che53.set('')
        ChathurBot_support.che54.set('')

        import Query
        data = Query.process(combination)
        response = self.Scrolledlistbox1
        intent = self.Scrolledlistbox2
        entity = self.Scrolledlistbox3
        sql = self.Scrolledlistbox4

        response.insert(0, data)
        intent.insert(0, data)
        entity.insert(0, data)
        sql.insert(0, data)

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans Mono} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 0 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("603x659+454+36")
        top.title("ChathurBot")
        top.configure(background="#d8c99c")
        top.configure(highlightcolor="black")

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.02, rely=0.02, relheight=0.36, relwidth=0.95)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#d6dcd8")
        self.Frame1.configure(width=570)

        self.Label4 = Label(self.Frame1)
        self.Label4.place(relx=0.02, rely=0.08, height=18, width=125)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(text='''Ask a Question Here''')

        self.fra41_but50 = Button(self.Frame1)
        self.fra41_but50.place(relx=0.86, rely=0.83, height=26, width=47)
        self.fra41_but50.configure(activebackground="#56311e")
        self.fra41_but50.configure(activeforeground="white")
        self.fra41_but50.configure(background="#d4d4b9")
        self.fra41_but50.configure(command=self.Ask)
        self.fra41_but50.configure(text='''Ask''')

        self.Scrolledentry1 = ScrolledEntry(self.Frame1)
        self.Scrolledentry1.place(relx=0.05, rely=0.21,relwidth=0.91)
        self.Scrolledentry1.configure(background="white")
        self.Scrolledentry1.configure(font=font9)
        self.Scrolledentry1.configure(insertborderwidth="1")
        self.Scrolledentry1.configure(selectbackground="#c4c4c4")
        self.Scrolledentry1.configure(width=15)

        self.TSizegrip6 = ttk.Sizegrip(self.Frame1)
        self.TSizegrip6.place(anchor=SE, relx=1.0, rely=1.0)

        self.Checkbutton2 = Checkbutton(self.Frame1)
        self.Checkbutton2.place(relx=0.05, rely=0.63, relheight=0.08
                , relwidth=0.21)
        self.Checkbutton2.configure(activebackground="#d9d9d9")
        self.Checkbutton2.configure(justify=LEFT)
        self.Checkbutton2.configure(text='''Neural Classifier''')
        self.Checkbutton2.configure(variable=ChathurBot_support.che46)

        self.Checkbutton3 = Checkbutton(self.Frame1)
        self.Checkbutton3.place(relx=0.05, rely=0.75, relheight=0.08
                , relwidth=0.33)
        self.Checkbutton3.configure(activebackground="#d9d9d9")
        self.Checkbutton3.configure(justify=LEFT)
        self.Checkbutton3.configure(state=ACTIVE)
        self.Checkbutton3.configure(text='''Machine Learning Classifier''')
        self.Checkbutton3.configure(variable=ChathurBot_support.che47)

        self.Checkbutton4 = Checkbutton(self.Frame1)
        self.Checkbutton4.place(relx=0.37, rely=0.5, relheight=0.08
                , relwidth=0.13)
        self.Checkbutton4.configure(activebackground="#d9d9d9")
        self.Checkbutton4.configure(justify=LEFT)
        self.Checkbutton4.configure(text='''CoreNLP''')
        self.Checkbutton4.configure(variable=ChathurBot_support.che48)

        self.Checkbutton5 = Checkbutton(self.Frame1)
        self.Checkbutton5.place(relx=0.37, rely=0.63, relheight=0.08
                , relwidth=0.1)
        self.Checkbutton5.configure(activebackground="#d9d9d9")
        self.Checkbutton5.configure(justify=LEFT)
        self.Checkbutton5.configure(text='''Wit.ai''')
        self.Checkbutton5.configure(variable=ChathurBot_support.che49)

        self.Checkbutton7 = Checkbutton(self.Frame1)
        self.Checkbutton7.place(relx=0.63, rely=0.5, relheight=0.08
                , relwidth=0.16)
        self.Checkbutton7.configure(activebackground="#d9d9d9")
        self.Checkbutton7.configure(justify=LEFT)
        self.Checkbutton7.configure(text='''Rule Based''')
        self.Checkbutton7.configure(variable=ChathurBot_support.che51)

        self.Checkbutton8 = Checkbutton(self.Frame1)
        self.Checkbutton8.place(relx=0.63, rely=0.63, relheight=0.08
                , relwidth=0.15)
        self.Checkbutton8.configure(activebackground="#d9d9d9")
        self.Checkbutton8.configure(justify=LEFT)
        self.Checkbutton8.configure(text='''prediction''')
        self.Checkbutton8.configure(variable=ChathurBot_support.che52)

        self.Checkbutton9 = Checkbutton(self.Frame1)
        self.Checkbutton9.place(relx=0.63, rely=0.75, relheight=0.08
                , relwidth=0.14)
        self.Checkbutton9.configure(activebackground="#d9d9d9")
        self.Checkbutton9.configure(justify=LEFT)
        self.Checkbutton9.configure(text='''Seq2Seq''')
        self.Checkbutton9.configure(variable=ChathurBot_support.che53)

        self.Checkbutton1 = Checkbutton(self.Frame1)
        self.Checkbutton1.place(relx=0.05, rely=0.5, relheight=0.08
                , relwidth=0.1)
        self.Checkbutton1.configure(activebackground="#d9d9d9")
        self.Checkbutton1.configure(justify=LEFT)
        self.Checkbutton1.configure(text='''Wit.ai''')
        self.Checkbutton1.configure(variable=ChathurBot_support.che54)

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.02, rely=0.39, relheight=0.2, relwidth=0.95)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(width=575)

        self.TSizegrip1 = ttk.Sizegrip(self.Frame2)
        self.TSizegrip1.place(anchor=SE, relx=1.0, rely=1.0)

        self.Label1 = Label(self.Frame2)
        self.Label1.place(relx=0.05, rely=0.07, height=18, width=61)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Response''')

        self.Scrolledlistbox1 = ScrolledListBox(self.Frame2)
        self.Scrolledlistbox1.place(relx=0.35, rely=0.07, relheight=0.84
                , relwidth=0.6)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(font=font10)
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(width=10)

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.02, rely=0.62, relheight=0.07, relwidth=0.95)
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(width=575)

        self.TSizegrip2 = ttk.Sizegrip(self.Frame3)
        self.TSizegrip2.place(anchor=SE, relx=1.0, rely=1.0)

        self.Label2 = Label(self.Frame3)
        self.Label2.place(relx=0.07, rely=0.22, height=18, width=41)
        self.Label2.configure(text='''Intent''')

        self.Scrolledlistbox2 = ScrolledListBox(self.Frame3)
        self.Scrolledlistbox2.place(relx=0.35, rely=0.22, relheight=0.53
                , relwidth=0.46)
        self.Scrolledlistbox2.configure(background="white")
        self.Scrolledlistbox2.configure(font=font10)
        self.Scrolledlistbox2.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox2.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox2.configure(width=10)

        self.Frame4 = Frame(top)
        self.Frame4.place(relx=0.02, rely=0.71, relheight=0.13, relwidth=0.95)
        self.Frame4.configure(relief=GROOVE)
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief=GROOVE)
        self.Frame4.configure(width=575)

        self.Scrolledlistbox3 = ScrolledListBox(self.Frame4)
        self.Scrolledlistbox3.place(relx=0.35, rely=0.12, relheight=0.75
                , relwidth=0.6)
        self.Scrolledlistbox3.configure(background="white")
        self.Scrolledlistbox3.configure(font=font10)
        self.Scrolledlistbox3.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox3.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox3.configure(width=10)

        self.Label3 = Label(self.Frame4)
        self.Label3.place(relx=0.05, rely=0.12, height=18, width=49)
        self.Label3.configure(text='''Entities''')

        self.Frame5 = Frame(top)
        self.Frame5.place(relx=0.02, rely=0.86, relheight=0.13, relwidth=0.95)
        self.Frame5.configure(relief=GROOVE)
        self.Frame5.configure(borderwidth="2")
        self.Frame5.configure(relief=GROOVE)
        self.Frame5.configure(width=575)

        self.Scrolledlistbox4 = ScrolledListBox(self.Frame5)
        self.Scrolledlistbox4.place(relx=0.35, rely=0.12, relheight=0.75
                , relwidth=0.6)
        self.Scrolledlistbox4.configure(background="white")
        self.Scrolledlistbox4.configure(font=font10)
        self.Scrolledlistbox4.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox4.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox4.configure(width=10)

        self.Label5 = Label(self.Frame5)
        self.Label5.place(relx=0.07, rely=0.24, height=18, width=68)
        self.Label5.configure(text='''SQL Query''')


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledEntry(AutoScroll, Entry):
    '''A standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



