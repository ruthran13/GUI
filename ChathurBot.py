#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Nov 20, 2017 12:46:15 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import ChathurBot_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = ChathurBot (root)
    ChathurBot_support.init(root, top)
    root.mainloop()

w = None
def create_ChathurBot(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = ChathurBot (w)
    ChathurBot_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_ChathurBot():
    global w
    w.destroy()
    w = None


class ChathurBot:
    def Ask(self):
        # import query
        question = self.fra41_scr40.get()
        # reply = query.query(question)
        # toData = self.Scrolledlistbox1
        # toData.insert(END, reply)
        # sys.stdout.flush()

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans Mono} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 0 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("603x564+583+55")
        top.title("ChathurBot")
        top.configure(background="#d8c99c")
        top.configure(highlightcolor="black")

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.02, rely=0.02, relheight=0.28, relwidth=0.96)
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief=GROOVE)
        self.Frame1.configure(background="#d6dcd8")
        self.Frame1.configure(width=585)

        self.Label4 = Label(self.Frame1)
        self.Label4.place(relx=0.02, rely=0.13, height=18, width=125)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(text='''Ask a Question Here''')

        self.fra41_but50 = Button(self.Frame1)
        self.fra41_but50.place(relx=0.81, rely=0.75, height=26, width=47)
        self.fra41_but50.configure(activebackground="#56311e")
        self.fra41_but50.configure(activeforeground="white")
        self.fra41_but50.configure(background="#d4d4b9")
        self.fra41_but50.configure(command=self.Ask)
        self.fra41_but50.configure(text='''Ask''')

        self.fra41_scr40 = ScrolledEntry(self.Frame1)
        self.fra41_scr40.place(relx=0.12, rely=0.38,relwidth=0.77)
        self.fra41_scr40.configure(background="white")
        self.fra41_scr40.configure(font=font9)
        self.fra41_scr40.configure(insertborderwidth="1")
        self.fra41_scr40.configure(selectbackground="#c4c4c4")
        self.fra41_scr40.configure(width=15)

        self.TSizegrip6 = ttk.Sizegrip(self.Frame1)
        self.TSizegrip6.place(anchor=SE, relx=1.0, rely=1.0)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.tNo43 = ttk.Notebook(top)
        self.tNo43.place(relx=0.02, rely=0.35, relheight=0.63, relwidth=0.97)
        self.tNo43.configure(width=582)
        self.tNo43.configure(takefocus="")
        self.tNo43_t0 = ttk.Frame(self.tNo43)
        self.tNo43.add(self.tNo43_t0, padding=3)
        self.tNo43.tab(0, text="Response    ",underline="-1",)
        self.tNo43_t1 = ttk.Frame(self.tNo43)
        self.tNo43.add(self.tNo43_t1, padding=3)
        self.tNo43.tab(1, text="Intent    ",underline="-1",)
        self.TNotebook1_t2 = ttk.Frame(self.tNo43)
        self.tNo43.add(self.TNotebook1_t2, padding=3)
        self.tNo43.tab(2, text="Entities    ",underline="-1",)
        self.tNo43_t3 = ttk.Frame(self.tNo43)
        self.tNo43.add(self.tNo43_t3, padding=3)
        self.tNo43.tab(3, text="SQL Query    ",underline="-1",)

        self.Scrolledlistbox1 = ScrolledListBox(self.tNo43_t0)
        self.Scrolledlistbox1.place(relx=0.33, rely=0.15, relheight=0.56
                , relwidth=0.65)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(font=font10)
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(width=10)

        self.Label1 = Label(self.tNo43_t0)
        self.Label1.place(relx=0.02, rely=0.15, height=18, width=145)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Response From System''')

        self.TSizegrip1 = ttk.Sizegrip(self.tNo43_t0)
        self.TSizegrip1.place(anchor=SE, relx=1.0, rely=1.0)

        self.TSizegrip2 = ttk.Sizegrip(self.tNo43_t0)
        self.TSizegrip2.place(anchor=SE, relx=1.0, rely=1.0)

        self.TSizegrip7 = ttk.Sizegrip(self.tNo43_t0)
        self.TSizegrip7.place(anchor=SE, relx=1.0, rely=1.0)

        self.Label2 = Label(self.tNo43_t1)
        self.Label2.place(relx=0.05, rely=0.09, height=18, width=119)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Intent Classified By''')

        self.Listbox1 = Listbox(self.tNo43_t1)
        self.Listbox1.place(relx=0.52, rely=0.09, relheight=0.16, relwidth=0.46)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(font=font10)
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(width=264)

        self.Label9 = Label(self.tNo43_t1)
        self.Label9.place(relx=0.05, rely=0.45, height=18, width=119)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(text='''Intent Classified By''')

        self.Listbox7 = Listbox(self.tNo43_t1)
        self.Listbox7.place(relx=0.52, rely=0.42, relheight=0.16, relwidth=0.46)
        self.Listbox7.configure(background="white")
        self.Listbox7.configure(font=font10)
        self.Listbox7.configure(selectbackground="#c4c4c4")
        self.Listbox7.configure(width=264)

        self.TSizegrip3 = ttk.Sizegrip(self.tNo43_t1)
        self.TSizegrip3.place(anchor=SE, relx=1.0, rely=1.0)

        self.Listbox2 = Listbox(self.TNotebook1_t2)
        self.Listbox2.place(relx=0.47, rely=0.09, relheight=0.25, relwidth=0.49)
        self.Listbox2.configure(background="white")
        self.Listbox2.configure(font=font10)
        self.Listbox2.configure(selectbackground="#c4c4c4")
        self.Listbox2.configure(width=284)

        self.Label3 = Label(self.TNotebook1_t2)
        self.Label3.place(relx=0.03, rely=0.09, height=18, width=129)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(text='''Entities Identified By''')

        self.Label8 = Label(self.TNotebook1_t2)
        self.Label8.place(relx=0.03, rely=0.52, height=18, width=129)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(text='''Entities Identified By''')

        self.Listbox6 = Listbox(self.TNotebook1_t2)
        self.Listbox6.place(relx=0.47, rely=0.52, relheight=0.25, relwidth=0.49)
        self.Listbox6.configure(background="white")
        self.Listbox6.configure(font=font10)
        self.Listbox6.configure(selectbackground="#c4c4c4")
        self.Listbox6.configure(width=284)

        self.TSizegrip4 = ttk.Sizegrip(self.TNotebook1_t2)
        self.TSizegrip4.place(anchor=SE, relx=1.0, rely=1.0)

        self.Label5 = Label(self.tNo43_t3)
        self.Label5.place(relx=0.07, rely=0.12, height=18, width=86)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(text='''Generated By''')

        self.Label6 = Label(self.tNo43_t3)
        self.Label6.place(relx=0.07, rely=0.36, height=18, width=86)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(text='''Generated By''')

        self.Label7 = Label(self.tNo43_t3)
        self.Label7.place(relx=0.07, rely=0.61, height=18, width=86)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(text='''Generated By''')

        self.Listbox3 = Listbox(self.tNo43_t3)
        self.Listbox3.place(relx=0.43, rely=0.12, relheight=0.16, relwidth=0.54)
        self.Listbox3.configure(background="white")
        self.Listbox3.configure(font=font10)
        self.Listbox3.configure(selectbackground="#c4c4c4")
        self.Listbox3.configure(width=314)

        self.Listbox4 = Listbox(self.tNo43_t3)
        self.Listbox4.place(relx=0.43, rely=0.36, relheight=0.16, relwidth=0.54)
        self.Listbox4.configure(background="white")
        self.Listbox4.configure(font=font10)
        self.Listbox4.configure(selectbackground="#c4c4c4")
        self.Listbox4.configure(width=314)

        self.Listbox5 = Listbox(self.tNo43_t3)
        self.Listbox5.place(relx=0.43, rely=0.61, relheight=0.16, relwidth=0.54)
        self.Listbox5.configure(background="white")
        self.Listbox5.configure(font=font10)
        self.Listbox5.configure(selectbackground="#c4c4c4")
        self.Listbox5.configure(width=314)

        self.TSizegrip5 = ttk.Sizegrip(self.tNo43_t3)
        self.TSizegrip5.place(anchor=SE, relx=1.0, rely=1.0)





# The following code is added to facilitate the Scrolled widgets specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledEntry(AutoScroll, Entry):
    '''A standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



